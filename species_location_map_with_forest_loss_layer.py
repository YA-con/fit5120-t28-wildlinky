# -*- coding: utf-8 -*-
"""Species_Location_Map_With_Forest_loss_Layer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/139l72WjFhDtj0N1yqmw_FqJw0pZQwDNC
"""

!pip install psycopg2-binary pandas plotly

#
import psycopg2
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import geopandas as gpd
import json


# Connection details
host = "aws-0-ap-southeast-2.pooler.supabase.com"
port = 6543
database = "postgres"
user = "postgres.tchwwnlazebhayosesvf"
password = "ta28_monash"

# Connect to the database
conn = psycopg2.connect(
    host=host,
    port=port,
    database=database,
    user=user,
    password=password
)

# Query your table
query = "SELECT * FROM species_locations;"
query2 = "SELECT * FROM threatened_species"
# Fetch into a DataFrame
df = pd.read_sql_query(query, conn)
d2 = pd.read_sql_query(query2, conn)

# Close connection
conn.close()

# @title
# # Old code
# import json
# import geopandas as gpd
# import pandas as pd
# import plotly.graph_objects as go
# import plotly.express as px

# # Load forest loss GeoJSON
# with open("vic_forest_loss_points.geojson", 'r', encoding='utf-8') as f:
#     data = json.load(f)

# gdf = gpd.GeoDataFrame.from_features(data["features"])
# gdf.set_crs("EPSG:4326", inplace=True)
# gdf['year'] = gdf['lossyear'] + 2000
# gdf['lon'] = gdf.geometry.x
# gdf['lat'] = gdf.geometry.y
# gdf = gdf[(gdf['year'] >= 2010) & (gdf['year'] <= 2020)]

# # Load species sightings CSV
# # df = pd.read_csv("your_species_sightings.csv")  # Replace this with your actual file
# df = df[(df['year'] >= 2010) & (df['year'] <= 2020)]

# species_ids = df['name'].unique()
# years = list(range(2010, 2021))
# colors = px.colors.qualitative.Plotly
# color_map = {species: colors[i % len(colors)] for i, species in enumerate(species_ids)}

# # Create forest loss trace for initial year
# initial_year = 2010
# df_year = gdf[gdf['year'] <= initial_year]

# forest_trace = go.Scattermapbox(
#     lat=df_year['lat'],
#     lon=df_year['lon'],
#     mode='markers',
#     marker=dict(size=4, color='rgba(255,0,0,0.1)'),  # Very low opacity
#     name="Forest Loss (Cumulative)",
#     hoverinfo='skip'
# )

# # Create species traces (only one visible at a time)
# species_traces = []
# for i, species in enumerate(species_ids):
#     df_s = df[df['name'] == species]
#     trace = go.Scattermapbox(
#         lat=df_s['lat'],
#         lon=df_s['long'],
#         mode='markers',
#         marker=dict(size=7, color=color_map[species]),
#         name=species,
#         customdata=df_s[['year', 'region', 'site_desc']],
#         hovertemplate="<b>Year:</b> %{customdata[0]}<br>" +
#                       "<b>Site:</b> %{customdata[2]}<extra></extra>"
#     )
#     species_traces.append(trace)

# # Combine all traces
# data = [forest_trace] + species_traces

# # Create frames for forest loss animation
# frames = []
# for year in years:
#     df_year = gdf[gdf['year'] <= year]
#     frames.append(go.Frame(
#         data=[
#             go.Scattermapbox(
#                 lat=df_year['lat'],
#                 lon=df_year['lon'],
#                 mode='markers',
#                 marker=dict(size=4, color='rgba(255,0,0,0.01)'),
#                 name=f"Forest Loss ≤ {year}",
#                 hoverinfo='skip'
#             )
#         ],
#         name=str(year),
#         traces=[0]
#     ))

# # Dropdown buttons for species traces
# dropdown_buttons = []
# for i, species in enumerate(species_ids):
#     visibility = [True] + [j == i for j in range(len(species_ids))]
#     dropdown_buttons.append(dict(
#         label=species,
#         method="update",
#         args=[{"visible": visibility},
#               {"title": f"Cumulative Forest Loss + Sightings of {species}"}]
#     ))

# # Slider steps for each year
# slider_steps = []
# for year in years:
#     slider_steps.append(dict(
#         method="animate",
#         args=[[str(year)], {"mode": "immediate", "frame": {"duration": 800, "redraw": True}, "transition": {"duration": 300}}],
#         label=str(year)
#     ))

# # Build the figure
# fig = go.Figure(data=data, frames=frames)

# # Layout update
# fig.update_layout(
#     mapbox=dict(
#         center=dict(lat=df['lat'].mean(), lon=df['long'].mean()),
#         zoom=5,
#         style="open-street-map"
#     ),
#     updatemenus=[
#         {
#             "buttons": dropdown_buttons,
#             "direction": "down",
#             "showactive": True,
#             "x": 0.88,
#             "xanchor": "center",
#             "y": 1.15,
#             "yanchor": "top"
#         },
#         {
#             "type": "buttons",
#             "showactive": False,
#             "x": 0.1,
#             "y": 1.1,
#             "buttons": [
#                 {
#                     "label": "▶️ Play",
#                     "method": "animate",
#                     "args": [None, {"frame": {"duration": 1000, "redraw": True}, "fromcurrent": True}]
#                 },
#                 {
#                     "label": "⏸️ Pause",
#                     "method": "animate",
#                     "args": [[None], {"mode": "immediate", "frame": {"duration": 0}, "transition": {"duration": 0}}]
#                 }
#             ]
#         }
#     ],
#     sliders=[{
#         "active": 0,
#         "steps": slider_steps,
#         "pad": {"t": 50},
#         "currentvalue": {"prefix": "Forest Loss ≤ Year: "}
#     }],
#     title="Species Sightings + Cumulative Forest Loss",
#     height=700,
#     margin=dict(t=80, b=0, l=0, r=0),
#     showlegend=True
# )

# # Save to HTML
# fig.write_html("species_forest_loss_final_cleaned.html")
# print("✅ Map saved as: species_forest_loss_final_cleaned.html")

# Load and prepare forest loss data
with open("vic_forest_loss_points.geojson", 'r', encoding='utf-8') as f:
    data = json.load(f)
gdf = gpd.GeoDataFrame.from_features(data["features"])
gdf.set_crs("EPSG:4326", inplace=True)
gdf['year'] = gdf['lossyear'] + 2000
gdf['lon'] = gdf.geometry.x
gdf['lat'] = gdf.geometry.y
gdf = gdf[(gdf['year'] >= 2010) & (gdf['year'] <= 2020)]

# Filter species sightings by year
df = df[(df['year'] >= 2010) & (df['year'] <= 2020)]
species_ids = df['name'].unique()
years = list(range(2010, 2021))
colors = px.colors.qualitative.Plotly
color_map = {species: colors[i % len(colors)] for i, species in enumerate(species_ids)}

# Forest loss initial trace
df_year = gdf[gdf['year'] <= 2010]
forest_trace = go.Scattermapbox(
    lat=df_year['lat'],
    lon=df_year['lon'],
    mode='markers',
    marker=dict(size=4, color='rgba(255,0,0,0.1)'),
    name="Forest Loss (Cumulative)",
    hoverinfo='skip'
)

# Species sightings traces
species_traces = []
for i, species in enumerate(species_ids):
    df_s = df[df['name'] == species]
    trace = go.Scattermapbox(
        lat=df_s['lat'],
        lon=df_s['long'],
        mode='markers',
        marker=dict(size=7, color=color_map[species]),
        name=species,
        customdata=df_s[['year', 'region', 'site_desc']],
        hovertemplate="<b>Year:</b> %{customdata[0]}<br><b>Site:</b> %{customdata[2]}<extra></extra>"
    )
    species_traces.append(trace)

# Combine all traces
data = [forest_trace] + species_traces

# Create animation frames
frames = []
for year in years:
    df_year = gdf[gdf['year'] <= year]
    frames.append(go.Frame(
        data=[go.Scattermapbox(
            lat=df_year['lat'],
            lon=df_year['lon'],
            mode='markers',
            marker=dict(size=4, color='rgba(255,0,0,0.01)'),
            name=f"Forest Loss ≤ {year}",
            hoverinfo='skip'
        )],
        name=str(year),
        traces=[0]
    ))

# Dropdown buttons for species
dropdown_buttons = []
for i, species in enumerate(species_ids):
    visibility = [True] + [j == i for j in range(len(species_ids))]
    dropdown_buttons.append(dict(
        label=species,
        method="update",
        args=[{"visible": visibility},
              {"title": f"Threatened Species Sightings and Forest Loss Across Victoria (2010–2020): {species}"}]
    ))

# Slider steps
slider_steps = []
for year in years:
    slider_steps.append(dict(
        method="animate",
        args=[[str(year)], {"mode": "immediate", "frame": {"duration": 800, "redraw": True}, "transition": {"duration": 300}}],
        label=str(year)
    ))

# Build the figure
fig = go.Figure(data=data, frames=frames)

# Update layout
fig.update_layout(
    mapbox=dict(
        center=dict(lat=df['lat'].mean(), lon=df['long'].mean()),
        zoom=5,
        style="open-street-map"
    ),
    updatemenus=[
        {
            "buttons": dropdown_buttons,
            "direction": "down",
            "showactive": True,
            "x": 0.87,
            "xanchor": "left",
            "y": 0.99,
            "yanchor": "top"
        },
        {
            "type": "buttons",
            "showactive": False,
            "x": 0.01,
            "xanchor": "left",
            "y": 0.05,
            "yanchor": "bottom",
            "buttons": [
                {
                    "label": "▶️ Play",
                    "method": "animate",
                    "args": [None, {"frame": {"duration": 1000, "redraw": True}, "fromcurrent": True}]
                },
                {
                    "label": "⏸️ Pause",
                    "method": "animate",
                    "args": [[None], {"mode": "immediate", "frame": {"duration": 0}, "transition": {"duration": 0}}]
                }
            ]
        }
    ],
    sliders=[{
        "active": 0,
        "steps": slider_steps,
        "pad": {"t": 50},
        "currentvalue": {
            "prefix": "Year Shown: ",
            "font": {"size": 14, "color": "#333"}
        }
    }],
    title=dict(
        text="<b>Threatened Species Sightings and Forest Loss Across Victoria (2010–2020)</b>",
        x=0.5,
        xanchor='center',
        font=dict(size=20)
    ),
    height=700,
    margin=dict(t=100, b=20, l=20, r=20),
    showlegend=True
)

# Save to HTML file
fig.write_html("species_forest_loss_final_cleaned.html")
print("✅ Map saved as: species_forest_loss_final_cleaned.html")


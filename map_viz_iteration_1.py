# -*- coding: utf-8 -*-
"""Map_Viz_Iteration_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CpTHiaOJF8V4r-Lo_5SjZ78FEUYEX_CX
"""

pip install psycopg2-binary pandas plotly

import psycopg2
import pandas as pd

# Connection details
host = "aws-0-ap-southeast-2.pooler.supabase.com"
port = 6543
database = "postgres"
user = "postgres.tchwwnlazebhayosesvf"
password = "ta28_monash"  # <-- Replace this

# Connect to the database
conn = psycopg2.connect(
    host=host,
    port=port,
    database=database,
    user=user,
    password=password
)

# Query your table
query = "SELECT * FROM species_locations;"  # <-- Replace with your actual table name

# Fetch into a DataFrame
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Preview
print(df.head())

print(df.columns)        # Shows column names
print(df.info())         # Shows data types and non-null counts
print(df.describe())     # Quick stats for numeric columns

import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

# Load your dataset
# df = pd.read_csv("species_locations.csv")

# Filter only sightings between 2010–2020
df = df[(df['year'] >= 2010) & (df['year'] <= 2020)]

# Unique species
species_ids = df['name'].unique()

# Assign a color to each species (cycling if more than 10 species)
colors = px.colors.qualitative.Plotly
color_map = {species_id: colors[i % len(colors)] for i, species_id in enumerate(species_ids)}

# Create the figure
fig = go.Figure()

# Add a scatter trace for each species
for species_id in species_ids:
    df_species = df[df['name'] == species_id]

    fig.add_trace(go.Scattermapbox(
        lat=df_species['lat'],
        lon=df_species['long'],
        mode='markers',
        marker=dict(size=7, color=color_map[species_id]),
        name=species_id,
        customdata=df_species[['year', 'region', 'site_desc']],
        hovertemplate="<b>Year:</b> %{customdata[0]}<br>" +
                      "<b>Region:</b> %{customdata[1]}<br>" +
                      "<b>Site Desc:</b> %{customdata[2]}<extra></extra>"
    ))

# Make the dropdown buttons
dropdown_buttons = [
    # First button for "All"
    dict(
        label="All",
        method="update",
        args=[{"visible": [True] * len(species_ids)},
              {"title": "All Species Sightings (2010–2020)"}]
    )
]

# Add one button per species
for i, species_id in enumerate(species_ids):
    visibility = [False] * len(species_ids)
    visibility[i] = True  # Only this species trace is visible

    dropdown_buttons.append(
        dict(
            label=species_id,
            method="update",
            args=[{"visible": visibility},
                  {"title": f"Sightings of {species_id} (2010–2020)"}]
        )
    )

# Set mapbox settings
fig.update_layout(
    mapbox=dict(
        center=dict(lat=df['lat'].mean(), lon=df['long'].mean()),
        zoom=5,
        style="open-street-map"
    ),
    updatemenus=[
        dict(
            buttons=dropdown_buttons,
            direction="down",
            showactive=True,
            x=0.9,
            xanchor="center",
            y=1.15,
            yanchor="top"
        )
    ],
    height=600,
    margin=dict(t=80, b=0, l=0, r=0),
    title_text="All Species Sightings (2010–2020)",  # Default title
    showlegend=True  # Show legend
)

# Save as HTML
fig.write_html("species_2010_2020_dropdown_map.html")

fig.show()

